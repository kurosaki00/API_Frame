-  #用'-'开头,用来区分多个用例
  feature: 用户登录
  story: 登录b2c商城接口
  title: $ddt{title} #用例标题-验证登录成功用例-正例
  request:  #请求
    method: post   #请求方式
    url: ${read_config_yaml(base_url)}?s=user/login    #请求路径url
    headers:    #请求头
      Content_Type: application/json   #请求的数据类型
#    params:  # 公共参数，可以配置在pytest.ini文件中
#      application: app   #请求数据
#      application_client_type: h5
#      token: Null
    data:  # 数据驱动后这里的值不能写死，要自定义动态获取解析
      accounts: $ddt{accounts} #baili
      pwd: $ddt{pwd} #baili123
      type: $ddt{type} #username
  extract: #自动提取token
    token: $.data.token  #jsonpath提取方式，提取多个值，$.data.*
#    token2: '"token":"(.*?)"'   # 正则提取方式,'"token":"(.*?)","username":"(.*?)"'提取多个值
  parametrize: #数据驱动，一般为传入参数，传入时要将[{}]分解成一个或多个{}
    - ["title","accounts","pwd","type","assert_code","assert_msg"]   #参数名
    - ["用例标题-验证登录成功用例-正例","baili","baili123","username",0,"登录成功"]  #正例，和上一行的参数名一一对应
    - ["用例标题-验证登录失败用例-反例","baili","123.9","username",-1,"密码"]    #反例
    - ["用例标题-验证登录失败用例-反例",["baili","大白"],123,"username",-3,"不存在"]    #反例
  validate: #null    #断言
    #  断言有以下几种方式：
    #  状态码断言：一般为200 ok
    codes: 200
    #  业务断言：相等和包含
    equals:
#     msg: 登录成功
      code: $ddt{assert_code}
#     codesss: 0
    contains: $ddt{assert_msg} #data
    #  数据库断言：查询数据库语句
#    databases:
#     code: "select age from students where studentNO=1;"

#-
#  story: 登录b2c商城接口
#  title: 用例标题-验证登录失败用例-反例
#  request:
#    method: post
#    url: user/login
#    headers:
#      Content_Type: application/json
#    params:
#      application: app
#      application_client_type: h5
#      token: Null
#    data:
#      accounts: baili
#      pwd: 123
#      type: username
#  extract:
#    token: $.data.token
#  validate: null    #断言
